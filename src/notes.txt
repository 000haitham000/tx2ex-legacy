1) Remove spaces from any expression before parsing ................................ (FIXED)
2) While removing spaces, check for incorrectly placed ones e.g. "48 23.6" ......... ( N/A ) Treat as a missing operand case
3) Account for missing operands .................................................... (FIXED)
4) Add parentheses ................................................................. (FIXED)
5) Allow expressions in Summation start and end indices values ..................... (FIXED)
6) Fix Product like Summation in every possible aspect ............................. (FIXED)
7) Add array variables to the precedence table ..................................... (FIXED)
8) Allow expressions in array variables ............................................ (FIXED)
9) Add constants to precedence table ............................................... (FIXED)
10) findLastOccurence(...) for all node types MUST avoid anything between 
    brackets, braces or parentheses ................................................ (FIXED)
11) Allow C-type identifiers in tokens (consider using Regex) ...................... (FIXED) No Regex used
12) Add a Hashset of reserved identifiers .......................................... ( N/A ) No need for reserved words. Precedence takes care of it.
13) Recognize any identifier non-present in the Hashset of reserved identifiers
    as a variable or a vector element (according to what follows it) ............... ( N/A ) No need for reserved words. Precedence takes care of it.
14) Make a class named token that contains the token and its type .................. (FIXED)
15) Complete trigonometric functions ............................................... (FIXED)
16) Account for the array index out of bound exception that might be thrown while
    evaluating an VectorElementNode ................................................ (FIXED)
17) Account for the error where the summation/product operator opening bracket 
    '{' is missing ................................................................. (N/A) Not an error because the terms 'summation' and 'product' can be used as identifiers.
18) Account for missing opening parentheses '(', brackets '[' and braces '{' ....... (FIXED)
19) Account for extra dots within a floating point numbers ......................... (FIXED)
20) Add a comment about not counting spaces in IdentifierNotFoundException and
    InvalidFormatException ......................................................... (FIXED)
21) Account for null specific message parameter in IdentifierNotFoundException, 
    InvalidFormatException and VectorIndexOutOfBoundsException ..................... (FIXED)
22) Add the floor and ceil operators ............................................... (FIXED)
24) Add the modulo operator ........................................................ (FIXED)
25) Fix the negative sign (-) problem

------------
VERSION 1.01
------------
1) Fix nested parentheses problem .................................................. (FIXED)
2) Fix the negative and positive sign problems ..................................... (FIXED)
3) Fix consecutive signs problems ( e.g. 2*+3 and 2*-3 ) ........................... (FIXED)
4) Add the bi-objective sample XML file to the tutorial ............................ (FIXED)
5) Remove the Zero fix from the tutorial ........................................... (FIXED)

-------------
VERSION 2.0.0 (Version numbering system changed to be in accordance with SemVer(http://semver.org/))
-------------
1) Add nested trigonometric functions .............................................. (FIXED)
2) Re-Fix negative operators. Version 1.01 fix is replaced with another one that
   does not add new tokens to the tree during recursive parsing .................... (FIXED)
3) Prevent adding invalid variable names to the variables manager .................. ()
4) Update the schema (from version 1.0 to version 1.1): ............................ (FIXED)
        a) A variable may have min and/or max attributes
        b) Vector declarations added
        c) At least one variable/vector must be defined
        d) If both variables and vectors are declared, all variables my precede
           the definition of the first vector.
        e) Vectors may have mins and/or maxs attributes
        f) An identifier is extended to include indexed identifiers
        g) The constraints tag is modified to be optional
5) Set the IS_COALESCING property of the XMLInputFactory to true to prevent the
   XMLEventReader from splitting one text block into more than one event ........... (FIXED)
6) Add min multi-operand operator .................................................. (FIXED)
7) Add support for nesting in min, max, sum, prod operators. This support existed
   unintentionally (i.e. without any special handling) between sum and prod, 
   however is required special handling to support nesting within min and max,
   because they can take an arbitrary number of operands and consequently commas
   in between ...................................................................... (FIXED)
8) Add support for assignment statements. These statements add a new constant
   (not variable) to the variables manager. Assignment statements can be inline,
   e.g. the formula "2*(pi=3.14)*r*h + 2*pi*r^2" can be used to calculate the
   surface area of a cylinder. Notice how (pi) is used later in the same 
   expression ...................................................................... (FIXED)
9) Add absolute support ............................................................ (FIXED)
10) Floor, Ceil, Abs, Round, Min and Max does not accept other nested functions
    containing parentheses like tan() .............................................. (FIXED)
11) EvaluationException should be converted from a checked exception to 
    a non-checked exception i.e. it should inherit from RuntimeException instead
    of Exception ................................................................... (FIXED)
12) MathExpressionParser.buildParseTree(...) throws InstantiationException. This
    can however be avoided ......................................................... (FIXED)
13) Add numerical partial derivatives for both objectives and constraints .......... (FIXED)
14) Create a constant in OptimizationProblem representing the default delta
    DEFAULT_DELTA along with setDelta(...) and getDelta() methods which can be
    used if another delta is needed other than the default one. (of course 
    these two methods operate on another private field not the constant) ........... (FIXED)
15) Make all core members of OptimizationProblem class final. Namely, vm, 
    objList, conList, objGradListVariables, objGradListVectors, 
    conGradListVariables and conGradListVectors .................................... (FIXED)